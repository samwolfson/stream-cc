{"version":3,"sources":["src/logic/elements.js","src/logic/speech.js","src/main.js"],"names":["text","document","getElementById","textWrapper","recognition","SpeechRecognition","window","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","error","continuous","interimResults","onresult","e","resultArray","string","Array","from","results","map","r","transcript","join","textContent","scroll","scrollHeight","onend","start","console","warn"],"mappings":";AACO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,UAAA,EADA,IAAMA,EAAOC,SAASC,eAAe,QACrC,QAAA,KAAA,EAAA,IAAMC,EAAcF,SAASC,eAAe,eAA5C,QAAA,YAAA;;AC+BP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAhCA,IASWE,EATX,EAAA,QAAA,uBAEMC,EACLC,OAAOD,mBACPC,OAAOC,yBACPD,OAAOE,sBACPF,OAAOG,qBACPH,OAAOI,mBAyBR,QAAA,YAAA,EApBCN,QAAAA,YAAAA,OADgC,IAAtBC,EACI,CACbM,MACC,4FAGY,IAAIN,EAInBD,EAAYQ,YAAa,EAEzBR,EAAYS,gBAAiB,EAE7BT,EAAYU,SAAW,SAACC,GACjBC,IACAC,EADcC,MAAMC,KAAKJ,EAAEK,SACNC,IAAI,SAACC,GAAMA,OAAAA,EAAE,GAAGC,aAAYC,KAAK,IACvDC,EAAAA,KAAAA,YAAcR,EACPS,EAAAA,YAAAA,OAAO,EAAGvB,EAAYwB,YAAAA,eAGnCvB,EAAYwB,MAAQ,WAGnBxB,EAAYyB;;AC3BZ,aARD,IAAA,EAAA,QAAA,qBACA,EAAA,QAAA,uBAEIzB,EAAYO,YAAAA,OACfmB,QAAQC,KAAK3B,EAAYO,YAAAA,OACpBc,EAAAA,KAAAA,YAAcrB,EAAYO,YAAAA,OAEnBkB,EAAAA,YAAAA","file":"main.3ef02636.js","sourceRoot":"..","sourcesContent":["export const text = document.getElementById('text')\nexport const textWrapper = document.getElementById('textWrapper')","import { text, textWrapper } from '/src/logic/elements'\n\nconst SpeechRecognition =\n\twindow.SpeechRecognition ||\n\twindow.webkitSpeechRecognition ||\n\twindow.mozSpeechRecognition ||\n\twindow.msSpeechRecognition ||\n\twindow.oSpeechRecognition\n\nexport let recognition\n\nif (typeof SpeechRecognition === 'undefined') {\n\trecognition = {\n\t\terror:\n\t\t\t'This browser does not support speech recognition. Please open this app in Google Chrome.',\n\t}\n} else {\n\trecognition = new SpeechRecognition()\n}\n\n// Recognition config\nrecognition.continuous = true\n\nrecognition.interimResults = true\n\nrecognition.onresult = (e) => {\n\tconst resultArray = Array.from(e.results)\n\tconst string = resultArray.map((r) => r[0].transcript).join('')\n\ttext.textContent = string\n\ttextWrapper.scroll(0, textWrapper.scrollHeight)\n}\n\nrecognition.onend = () => {\n\t// Speech Recognition ends every few seconds of inactivity\n\t// but we want to keep it alive while the user is on the page\n\trecognition.start()\n}\n","import { recognition } from '/src/logic/speech'\nimport { text } from '/src/logic/elements'\n\nif (recognition.error) {\n\tconsole.warn(recognition.error)\n\ttext.textContent = recognition.error\n} else {\n\trecognition.start()\n}\n"]}