{"version":3,"sources":["src/logic/speech.js","src/logic/elements.js","src/main.js"],"names":["SpeechRecognition","window","webkitSpeechRecognition","recognition","error","continuous","interimResults","text","document","getElementById","textWrapper","console","warn","textContent","start","onresult","e","resultArray","Array","from","results","string","map","r","transcript","join","scroll","scrollHeight"],"mappings":";;AEAA;;AACA;;ADDO,ADAP,AEGA,IDHaO,ADAPP,AEGFG,IDHa,GAAGK,QAAQ,CAACC,CDAN,GAAGR,AEGVG,KAAhB,CFHgC,CAACJ,AEGV,GDHH,CAAwB,MAAxB,CAAb,MDAmB,IAA4BC,MAAM,CAACC,uBAA7D;AACO,AEGNS,EAAAA,EFHUR,KEGH,CAACS,IAAR,CFHM,AEGOT,oBAAYC,KAAzB;ADHM,ACING,IDJYG,WAAW,ECIlBG,CDJqBL,QAAQ,CAACC,CCInC,GAAmBN,UDJO,CAAwB,SCInBC,IDJL,CAApB,ACIN;AACA,CAHD,MAGO;AFJP,AEKCD,IFLG,OAAOH,WEKEc,KAAZ,CFLG,KAA6B,WAAjC,EAA8C;AAC7C,wBAAAX,WAAW,GAAG;AAAEC,AEKhBD,IFLgBC,KAAK,EAAE,WEKXW,QAAZ,GAAuB,UAACC,CAAD,EAAO;AFLhB,AEMb,GFND,KEMOC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWH,CAAC,CAACI,OAAb,CAApB;AFLD,AEMC,CFRF,MAEO,CEMCC,MAAM,GAAGJ,WAAW,CAACK,GAAZ,CACd,UAAAC,CAAC;AFNH,AEMG,aAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,MFNZrB,IEMG,OFNQ,GAAG,IAAIH,iBAAJ,EAAd;AACA,AEKG,KADa,EAEbyB,IAFa,CAER,EAFQ,CAAf;AAGAlB,mBAAKM,WAAL,GAAmBQ,MAAnB;AFNFlB,WAAW,CAACE,UAAZ,GAAyB,IAAzB;AACAF,AEMEO,WFNS,CAACJ,cAAZ,AEMcoB,GFNe,GEM3B,CFNF,AEMqB,CAAnB,EAAsBhB,sBAAYiB,YAAlC;AACA,GAPD;AAQA","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\nexport let recognition\nif (typeof SpeechRecognition === \"undefined\") {\n\trecognition = { error: 'This browser does not support speech recognition. Please open this app in Google Chrome.'}\n} else {\n\trecognition = new SpeechRecognition()\n}\nrecognition.continuous = true\nrecognition.interimResults = true","export const text = document.getElementById('text')\nexport const textWrapper = document.getElementById('textWrapper')","import { recognition } from '/src/logic/speech'\nimport { text, textWrapper } from '/src/logic/elements'\n\nif (recognition.error) {\n\tconsole.warn(recognition.error)\n\ttext.textContent = recognition.error\n} else {\n\trecognition.start()\n\trecognition.onresult = (e) => {\n\t\tconst resultArray = Array.from(e.results)\n\t\tconst string = resultArray.map(\n\t\t\tr => r[0].transcript\n\t\t).join('')\n\t\ttext.textContent = string\n\t\ttextWrapper.scroll(0, textWrapper.scrollHeight)\n\t}\n}"]}